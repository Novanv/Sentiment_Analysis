import torch
from transformers import AutoTokenizer, AutoModel
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import re


def replace_words(text):
    # Danh s√°ch t·ª´ c·∫ßn thay ƒë·ªïi v√† t·ª´ m·ªõi
    replacements = {'\\blƒÉ\b': ' l·∫Øm ', '\\bno\\b': ' n√≥ ', '\\bbi\b': ' b·ªã ','\\btr·∫•t\\b': ' t·ªët nh·∫•t ',
                    '\\bt\b': ' tao ', '( y )': ' positive ', '\\bbjo\\b': ' b√¢y gi·ªù ', "\\blz\\b": "l·ªìn", "\\bDKMM\\b": "ƒëm",
                    '\\bs√∫t\\b': ' s√∫c ', '\\bne\\b': ' n√® ', '\\bch·ª´\\b': ' gi·ªù ', "5 cu ( c·ªß )":"5 tri·ªáu",
                    '\\bhs\\b': ' h·ªçc sinh ', '\\bsgk\\b': ' s√°ch gi√°o khoa ', '\\bcv\\b': ' c√¥ng vi·ªác ', "\\bper\\b": "",
                    '\\blink\\b': ' ƒë∆∞·ªùng d·∫´n ', '\\bkq\\b': ' k·∫øt qu·∫£ ', '\\bdz·∫ßy\\b': ' n√†y ', "\\bcc\b": "con c·∫∑c",
                    '\\b5tr\\b': ' 5 tri·ªáu ', '\\bc thy\\b': ' ch·ªã thy ', '\\bad\\b': ' qu·∫£n tr·ªã vi√™n ',
                    '\\bz\\b': ' v·∫≠y ', '\\bcta\\b': ' ch√∫ng ta ', '\\bks\\b': ' kh√°ch s·∫°n ', '\\bafk\\b': ' √† ',
                    '\\bk\\b': ' kh√¥ng ', '\\bm\\b': ' m√†y ', '\\bt\\b': ' tao ', '\\bfa\\b': ' c√¥ ƒë∆°n ',
                    '\\bnyc\\b': ' ng∆∞·ªùi y√™u c≈© ', '\\bnge\\b': ' nghe ', '\\bzi\\b': ' v·∫≠y ',"\\bDM\\b": "ƒëm", "\\bƒêM\\b": "ƒëm",
                    '\\bc·ªßng\\b': ' c≈©ng ', '\\bs·ª©ng\\b': ' x·ª©ng ', '\\bof\\b': ' c·ªßa ', '\\bchay\\b': ' ch·∫°y ',
                    '\\bkip\\b': ' k·ªãp ', '\\bg\\b': ' g√¨ ', '\\bchowi\\b': ' ch∆°i ', '\\bt√∫m\\b': ' t·ª•m ',
                    '\\bstt\\b': ' tr·∫°ng th√°i ', '\\bl√≤ x√¥\\b': ' l√≤ xo ', '\\bf·∫£i\\b': ' ph·∫£i ',
                    '\\bviecj\\b': ' vi·ªác ', '\\bma\\b': ' m√† ', '\\bl√°p\\b': ' l√°o ', '\\bzo\\b': ' v√¥ ',
                    '\bhah\b': ' ha ha','\bhaa\b':'ha ha', '\\bq.t√¢m\\b': ' quan t√¢m ','\\bpr\\b': ' qu·∫£ng c√°o ',
                    '\\b∆°iii\\b': ' ∆°i ', '\\bdume\\b': ' ƒëm ', '\\bch·ªõt\\b': ' ch·∫øt ', "\\bc * c\\b": "c·∫∑c",
                    '\\bcrush\\b': ' ng∆∞·ªùi m√¨nh th√≠ch ', '\\bnta\\b': ' ng∆∞·ªùi ta ', "\\bdt\\b": "ƒëi·ªán tho·∫°i",
                    '\\bth·∫≠c\\b': ' th·∫≠t ', '\\blsao\\b': ' l√†m sao ', '\\bm·∫∑p\\b': ' m·∫≠p ', "\\b:d\\b" : ":D",
                    '\\bc·ªù r√∫t\\b': ' ng∆∞·ªùi m√¨nh th∆∞∆°ng ', '\\bd·ªìi\\b': ' r·ªìi ', '\\bnghi√™\\b': ' nghi·ªáp ',
                    '\\bt∆∞·ªü\\b': ' t∆∞·ªüng ', '\\bb∆∞·ªõ c\\b': ' b∆∞·ªõc ', "\\bmu·ªën b·∫Øn , mu·ªën l√†m vi·ªác\\b": "kh√¥ng mu·ªën b·∫Øn, kh√¥ng mu·ªën l√†m vi·ªác",
                    '\\bhaizzz\\b': ' bu·ªìn ', '\\blu√¥nnn\\b': ' lu√¥n ', "\\bk√¨ th√≠ch\\b" : "c·ª© th√≠ch",
                    '\\btui thi ÃÅ ch va Ãâ i  l·∫Øm  ÃÅ m√†y m√† ÃÄ ƒÉn nh·ªâ ÃÄ u  n√≥  ÃÅ ng∆∞·ªùi  l·∫Øm  ÃÅ m√†y m·ªçi ng∆∞·ªùi anh Ã£ ,  b·ªã  Ã£ l∆° Ãâ mi√™ Ã£ ng∆∞·ªùi\\b': "t√¥i th√≠ch v·∫£i l·∫Øm m√† ƒÉn nhi·ªÅu n√≥ng ng∆∞·ªùi l·∫Øm m·ªçi ng∆∞·ªùi √†, b·ªã l·ª° mi·ªáng ·∫•y",
                    '\\bkkk\\b': ' vui ', '\\bkh√°c h√†g\\b': ' kh√°ch h√†ng ', '\\bƒëanh\\b': ' ƒë√°nh ',
                    '\\bgym\\b': ' ph√≤ng th·ªÉ d·ª•c ', '\\btime\\b': ' th·ªùi gian ', '\\bm√≥a\\b': ' m√° ',
                    '\\bmink\\b': ' m√¨nh ', '\\bnv\\b': ' nh∆∞ v·∫≠y ', '\\bch∆∞\\b': ' ch·ª© ', "\\bgh√™ rƒÉng üòÅ\\b": "gh√™ qu√°",
                    '\\bv√£i_ch∆∞·ªüng\\b': ' v√£i ch∆∞·ªüng ', '\\bthu·ªùng\\b': 'b√¨nh th∆∞·ªùng', '\\boi\\b': ' ∆°i ','\\blƒÉ\\b': ' l·∫Øm ', '\\bno\\b': ' n√≥ ',
                    '\\bbi\\b': ' b·ªã ', '\\btr·∫•t\\b': ' t·ªët nh·∫•t ','\\bhs\\b': 'h·ªçc sinh', '\\bsgk\\b': 's√°ch gi√°o khoa', '\\bcv\\b': 'c√¥ng vi·ªác',
                    '\\bdz·∫ßy\\b': 'n√†y', '\\b5tr\\b': '5 tri·ªáu', '\\bc thy\\b': 'ch·ªã thy', '\\bad\\b': 'qu·∫£n tr·ªã vi√™n', '\\bz\\b': 'v·∫≠y',
                    '\\bcta\\b': 'ch√∫ng ta', '\\bks\\b': 'kh√°ch s·∫°n', '\\bafk\\b': '√†', '\\bk\\b': 'kh√¥ng', '\\bm\\b': 'm·∫ßy', '\\bt\\b': 'tao',
                    '\\bfa\\b': 'c√¥ ƒë∆°n', '\\bnyc\\b': 'ng∆∞·ªùi y√™u c≈©', '\\bnge\\b': 'nghe', '\\bzi\\b': 'v·∫≠y', '\\bc·ªßng\\b': 'c≈©ng', '\\bs·ª©ng\\b': 'x·ª©ng',
                    '\\bof\\b': 'c·ªßa', '\\bchay\\b': 'ch·∫°y', '\\bkip\\b': 'k·ªãp', '\\bg\\b': 'g√¨', '\\bchowi\\b': 'ch∆°i', '\\bt√∫m\\b': 't·ª•m',
                    '\\bstt\\b': 'tr·∫°ng th√°i', '\\bl√≤ x√¥\\b': 'l√≤ xo', '\\bf·∫£i\\b': 'ph·∫£i', '\\bviecj\\b': 'vi·ªác', '\\bma\\b': 'm√†',
                    '\\bl√°p\\b': 'l√°o', '\\bzo\\b': 'v√¥', '\\bhihi\\b': 'hi hi', '\\bhahah\\b': 'ha ha', '\\bq.t√¢m\\b': 'quan t√¢m', '\\bhuhu\\b': 'hu hu',
                    '\\b∆°iii\\b': '∆°i', '\\bpr\\b': 'qu·∫£ng c√°o', '\\bcrush\\b': 'ng∆∞·ªùi m√¨nh th√≠ch', '\\bnta\\b': 'ng∆∞·ªùi ta',
                    '\\bch·ªõt\\b': 'ch·∫øt', '\\bth·∫≠c\\b': 'th·∫≠t', '\\blsao\\b': 'l√†m sao', '\\bm·∫∑p\\b': 'm·∫≠p', '\\bc·ªù r√∫t\\b': 'ng∆∞·ªùi m√¨nh th∆∞∆°ng', '\\bd·ªìi\\b': 'r·ªìi',
                    '\\bnghi√™\\b': 'nghi·ªáp', '\\bt∆∞·ªü\\b': 't∆∞·ªüng', '\\bb∆∞·ªõ c\\b': 'b∆∞·ªõc', '\\bhaha\\b': 'ha ha', '\\bhaizzz\\b': 'bu·ªìn',
                    '\\bh√≠ h√≠\\b': 'hi hi', '\\bvkl\\b': 'vui', '\\bkkk\\b': 'ha ha', '\\bkh√°c h√†g\\b': 'kh√°ch h√†ng', '\\blu√¥nnn\\b': 'lu√¥n',
                    '\\bgym\\b': 'ph√≤ng th·ªÉ d·ª•c', '\\btime\\b': 'th·ªùi gian', '\\bm√≥a\\b': 'm√°', '\\bmink\\b': 'm√¨nh', '\\bnv\\b': 'nh∆∞ v·∫≠y', '\\bch∆∞\\b': 'ch·ª©',
                    '\\bƒëanh\\b': 'ƒë√°nh', '\\bv√£i_ch∆∞·ªüng\\b': 'v√£i ch∆∞·ªüng', '\\bthu·ªùng\\b': 'th∆∞·ªùng', '\\boi\\b': '∆°i', '\\btroi\\b': 'tr·ªùi', '\\br·∫£\\b': 'gi·∫£',
                    '\\bc·ªù r·ªõt\\b': 'ng∆∞·ªùi m√¨nh th∆∞∆°ng', '\\bc·ªù h√≥\\b': 'ch√≥', '\\bhahahaha\\b': 'ha ha', '\\be\\b': 'em',
                    '\\bthuoc\\b': 'thu·ªôc', '\\bnua\\b': 'n·ªØa', '\\bbat\\b': 'b·∫Øt', '\\bkiem tien\\b': 'ki·∫øm ti·ªÅn', '\\bch·ªùiiiii\\b': 'tr·ªùi',
                    '\\bpage\\b': 'trang', '\\bshipper\\b': 'ng∆∞·ªùi giao h√†ng', '\\bqu√°aaaa\\b': 'qu√°', '\\bt√¥iii\\b': 't√¥i', '\\bs\\b': 'sao', '\\bz\\b': 'v·∫≠y',
                    '\\bdel\\b': 'ƒë√©o', '\\br\\b': 'r·ªìi', '\\bcute\\b': 'd·ªÖ th∆∞∆°ng', '\\bƒë√©o b√≠t\\b': 'kh√¥ng bi·∫øt', '\\bah\\b': '·∫°',
                    '\\bƒë·∫•yyyy\\b': 'ƒë·∫•y', '\\bth\\b': 'th·∫±ng', '\\bc√°m\\b': 'c·∫£m', '\\bvn\\b': 'vi·ªát nam', '\\bng\\b': 'ng∆∞·ªùi', '\\by√™uc\\b': 'y√™u',
                    '\\bhuhuhu\\b': 'bu·ªìn', '\\bntn√†y\\b': 'nh∆∞ th·∫ø n√†y', '\\bpv\\b': 'ph·ª•c v·ª•', '\\bm√∫n\\b': 'mu·ªën', '\\btroll\\b': 'ƒë√πa',
                    '\\bcf\\b': 'c√† ph√™', '\\bth√¥iiii\\b': 'th√¥i', '\\bthg\\b': 'th·∫±ng', '\\bdth\\b': 'd·ªÖ th∆∞∆°ng', '\\bhv\\b': 'nh∆∞ v·∫≠y', '\\b·ªïng\\b': '√¥ng',
                    '\\bdell\\b': 'ƒë√©o', '\\bƒë√¢yy\\b': 'ƒë√¢y', '\\bkkk\\b': 'vui', '\\bzai\\b': 'trai', '\\bquad\\b': 'qu√°',
                    '\\bbabe\\b': 'baby', '\\b1b trai\\b': 'm·ªôt b·∫°n trai', '\\bƒëcm\\b': 'ƒëm', '\\bgg\\b': 'google',
                    '\\bstk\\b': 's·ªë t√†i kho·∫£n', '\\bcsong\\b': 'cu·ªôc s·ªëng', '\\bko\\b': 'kh√¥ng', '\\bc trai\\b': 'con trai',
                    '\\bƒë√≠uu\\b': 'ƒë√©o', '\\bcsgt\\b': 'c·∫£nh s√°t giao th√¥ng', '\\bhaha\\b': 'ha ha', '\\be\\b': 'em', "\\bcute\\b": "d·ªÖ th∆∞∆°ng",
                    '\\bthuoc\\b': 'thu·ªôc', '\\bnua\\b': 'n·ªØa', '\\bbat\\b': 'b·∫Øt', '\\bkiem tien\\b': 'ki·∫øm ti·ªÅn', '\\bch·ªùiiiii\\b': 'tr·ªùi',
                    '\\bpage\\b': 'trang', '\\bshipper\\b': 'ng∆∞·ªùi giao h√†ng', '\\bqu√°aaaa\\b': 'qu√°', '\\bt√¥iii\\b': 't√¥i', '\\bs\\b': 'sao',
                    '\\bz\\b': 'v·∫≠y', '\\br\\b': 'r·ªìi', '\\bcute\\b': 'd·ªÖ th∆∞∆°ng', '\\bƒë√©o b√≠t\\b': 'ƒë√©o bi·∫øt', '\\bdcm\\b': 'ƒëm',
                    '\\bah\\b': '·∫°', '\\bƒë·∫•yyyy\\b': 'ƒë·∫•y', '\\bth\\b': 'th·∫±ng', '\\bc√°m\\b': 'c·∫£m', '\\bvn\\b': 'Vi·ªát Nam', '\\bng\\b': 'ng∆∞·ªùi', '\\by√™uc\\b': 'y√™u',
                    '\\bhuhuhu\\b': 'bu·ªìn', '\\bntn√†y\\b': 'nh∆∞ th·∫ø n√†y', '\\bpv\\b': 'ph·ª•c v·ª•', '\\bm√∫n\\b': 'mu·ªën', '\\btroll\\b': 'ƒë√πa',
                    '\\bcf\\b': 'c√† ph√™', '\\bth√¥iiii\\b': 'th√¥i', '\\bthg\\b': 'th·∫±ng', '\\bdth\\b': 'd·ªÖ th∆∞∆°ng', '\\bhv\\b': 'nh∆∞ v·∫≠y', '\\b·ªïng\\b': '√¥ng',
                    '\\bƒë√¢yy\\b': 'ƒë√¢y', '\\bkkk\\b': 'vui', '\\bzai\\b': 'trai', '\\bquad\\b': 'qu√°', "\\bc·ª•\\b": "m√†y", "\\bC·ª•\\b" : "m√†y",
                    '\\bdkm\\b': 'ƒëm', '\\bbabe\\b': 'baby', '\\b1b trai\\b': 'm·ªôt b·∫°n trai','\\bƒëcm\\b': ' ƒëm ', '\\bgg\\b': ' google ',
                    '\\bstk\\b': ' s·ªë t√†i kho·∫£n ', '\\bcsong\\b': ' cu·ªôc s·ªëng ', '\\bko\\b': ' kh√¥ng ', '\\bdisme\\b': ' nagative ', '\\bc trai\\b': ' con trai ',
                    '\\bƒë√≠uu\\b': ' ƒë√©o ', '\\bx·∫°olin\\b': ' x·∫°o l·ªìn ', '\\bcsgt\\b': ' c·∫£nh s√°t giao th√¥ng ', '\\bhix hix\\b': ' bu·ªìn ',
                    '\\bƒëiiii\\b': ' ƒëi ', '\\bhix\\b': ' bu·ªìn ', '\\bcam on\\b': ' c·∫£m ∆°n ', '\\bm·ªãe\\b': ' bu·ªìn ', '\\bth√≠ck\\b': ' th√≠ch ',
                    '\\bdisss\\b': ' ƒë·ªãt ', '\\b√†k\\b': ' √† ', '\\bv√£iii\\b': ' v√£i ', '\\bd√¨\\b': ' g√¨ ', '\\bch·ªôm\\b': ' tr·ªôm ', '\\bc√©c\\b': ' c·∫∑c ',
                    '\\bhaaaaa\\b': ' ha ha ', '\\bv·∫ßy\\b': ' nh∆∞ n√†y ', '\\b20 - 30\\b': ' hai m∆∞∆°i ƒë·∫øn ba m∆∞∆°i ', '\\bcute\\b': ' d·ªÖ th∆∞∆°ng ',
                    '\\bcƒëv\\b': ' c·ªó ƒë·ªông vi√™n ', '\\bm·ªÅnh\\b': ' m√¨nh ', '\\bnh·ªÉ\\b': ' nh·ªâ ', '\\bdrama\\b': ' k·ªãch ', '\\bgato\\b': ' ganh t·ªã ',
                    '\\b1\\b': ' m·ªôt ', '\\bph·∫Øng\\b': ' ph·∫Øn ', '\\bh√™td\\b': ' h·∫øt ', '\\bquay lip\\b': ' quay clip ', '\\br∆∞·ªõn\\b': ' r∆∞·ªõm ', '\\bhjhj\\b': ' hi hi ',
                    '\\bcta\\b': ' ch√∫ng ta ', '\\bhnua\\b': ' h√¥m n·ªØa ', '\\bfull\\b': ' ƒë·∫ßy ', '\\bzai\\b': ' trai ', '\\b400k\\b': ' b·ªën trƒÉm ngh√¨n ',
                    '\\by√™uc\\b': ' y√™u ', '\\bwao\\b': ' wao ', '\\bnhay\\b': ' nh√¢y ', '\\bz\\b': ' v·∫≠y ', '\\bcopy\\b': ' sao ch√©p ', '\\bmake\\b': ' l√†m ·ªü ',
                    '\\bng\\b': ' ng∆∞·ªùi ', '\\bsayy goodbye\\b': ' ch√†o t·∫°m bi·ªát ', '\\bbcs\\b': ' bao cao su ', '\\bsag\\b': ' sang ', '\\bad\\b': ' qu·∫£n tr·ªã vi√™n ',
                    '\\b3s\\b': ' ba gi√¢y ', '\\bctay\\b': ' chia tay ', '\\bbo Ã£ n na ÃÄ y cho ƒëi tu ÃÄ h√™ ÃÅ tao\\b': ' b·ªçn n√†y cho ƒëi t√π h·∫øt ',
                    '\\bcap\\b': ' ch·ª•p ', '\\bngheng\\b': ' nghen ', '\\bs m√†\\b': ' sao m√† ', '\\bt\\b': ' tao ', '\\bx√∫n\\b': ' xu·ªëng ', '\\bm·ªçe\\b': ' m·∫π ',
                    '\\bkphai\\b': ' kh√¥ng ph·∫£i ', '\\bshare\\b': ' chia s·∫ª ', '\\blist fr\\b': ' danh s√°ch b·∫°n b√® ', '\\bt·ª•t mood\\b': ' t·ª•t h·ª©ng ', '\\b10m\\b': ' m∆∞·ªùi m√©t ',
                    '\\br·ªìu\\b': ' r·ªìi ', '\\badmin\\b': ' qu·∫£n tr·ªã vi√™n ', '\\bnghi ngu·ªìn\\b': ' ghi ngu·ªìn ', '\\bmini\\b': ' nh·ªè ', '\\bm·ªõii\\b': ' m·ªõi ', '\\bng ta\\b': ' ng∆∞·ªùi ta ',
                    '\\bcsgt\\b': ' c·∫£nh s√°t giao th√¥ng ', '\\biemmm\\b': ' em ', '\\bfucklong\\b': ' ƒëm ', '\\bex\\b': ' ng∆∞·ªùi y√™u c≈© ', '\\bph√¨m\\b': ' phim ', '\\bch·∫°p\\b': ' t·∫≠p ',
                    '\\be\\b': ' em ', '\\bz\\b': ' v·∫≠y ', '\\bm√≥a\\b': ' m√° ', '\\baamir khan\\b': ' per ', '\\bnao\\b': ' n√†o ', '\\bnghia het\\b': ' nghƒ©a h·∫øt ',
                    '\\br·ªët c·ª•c\\b': ' r·ªët cu·ªôc ', '\\bh·ªèg\\b': ' h·ªèng ', '\\buwu\\b': ' d·ªÖ th∆∞∆°ng ', '\\bbanh kem\\b': ' b√°nh kem ', '\\bsn\\b': ' sinh nh·∫≠t ', '\\bdamege\\b': ' s√°t th∆∞∆°ng ',
                    '\\bs√¨ ph·ªë\\b': ' th√†nh ph·ªë ', '\\bcau view\\b': ' c√¢u l∆∞·ª£t xem ', '\\bonline\\b': ' tr∆∞·ª£c tuy·∫øn ', '\\bchg\\b': ' ch∆∞a ', '\\bbb\\b': ' b·∫°n b√® ',
                    '\\bb·ªïg\\b': ' b·ªïng ', '\\bkaraok\\b': ' karaoke ', '\\bhic hic\\b': ' hu hu ', '\\bc√°i m·∫πt\\b': ' c√°i m·∫∑t ', '\\bthoy\\b': ' th√¥i ',
                    '\\bweeee\\b': ' hi hi ', '\\b:d\\b': ' ha ha ', '\\bcontent\\b': ' n·ªôi dung ', '\\bfree\\b': ' mi·ªÖn ph√≠ ', '\\bcmt\\b': ' b√¨nh lu·∫≠n ',
                    '\\bhihee\\b': ' hi hi ', '\\blink\\b': 'ƒë∆∞·ªùng d·∫´n', '\\bkq\\b': 'k·∫øt qu·∫£', "lol" : "l·ªìn", "dume" : "ƒëm",
                    '\\b thƒÉ ÃÅ c mƒÉ ÃÅ c ta Ã£ i sao thƒÉ ÃÄ ng∆∞·ªùi da ƒëen no ÃÅ quen ƒë∆∞·ª£c con nho Ãâ da trƒÉ ÃÅ ng∆∞·ªùi ngon va ÃÉ i th√™ ÃÅ nhy ÃÉ \\b': ' tao ƒëang th·∫Øc m·∫Øc t·∫°i sao th·∫±ng ng∆∞·ªùi da ƒëen n√≥ quen ƒë∆∞·ª£c con nh·ªè da tr·∫Øng ng∆∞·ªùi ngon v√£i th·∫ø nh·ªâ ',
                    '\\bcia\\b': ' kia ', '\\bl·∫øuuuuuu\\b': ' l·∫øu ', '\\bpug\\b': ' orther ', '\\bƒëag\\b': ' ƒëang ', '\\bv√£i_ch∆∞·ªüng\\b': ' v√£i ch∆∞·ª°ng ',
                    '\\bteam\\b': ' ƒë·ªôi ', '\\b150trieu\\b': ' 150 tri·ªáu ', '\\bc√†r√¥t\\b': ' c√† r·ªët ', '\\ball\\b': ' t·∫•t c·∫£ ', '\\bxink\\b': ' xinh ',
                    '\\bcaooooo\\b': ' cao ', '\\bsong r·ªìi\\b': ' xong r·ªìi ', '\\bvalungtung\\b': ' va lung tung ', '\\bb\\b': ' b·∫°n ', '\\bhk\\b': ' h√¥ng ',
                    '\\bxh\\b': ' x√£ h·ªôi ', '\\bnh∆∞g\\b': ' nh∆∞ng ', '\\bƒëmmmmm\\b': ' ƒëm ', '\\b:\\(\\b': ' nagative ', '\\bmlz\\b': ' m·∫∑t l·ªìn v·∫≠y ',
                    '\\bmatlon\\b': ' m·∫∑t l·ªìn ', '\\bdoctor\\b': ' b√°c sƒ© ', '\\bgood\\b': ' t·ªët ', '\\bv·ª´a vv and vv\\b': '', '\\bvv\\b': ' v√¢n v√¢n ',
                    '\\bbƒë\\b': ' b√™ ƒë√™ ', '\\bbthg\\b': ' b√¨nh th∆∞·ªùng ', '\\bl·ªü c√≥\\b': ' l·ª° c√≥ ', '\\bl∆∞∆°ng nv\\b': ' l∆∞∆°ng nh√¢n vi√™n ', '\\bdt\\b': ' ƒëi·ªán tho·∫°i ',
                    '\\bvliz\\b': ' vl ', '\\bml\\b': ' m·∫∑t l·ªìn ', '\\bmiss you\\b': ' nh·ªõ b·∫°n ', '\\bv tr·ªùiiiiii\\b': ' v·∫≠y tr·ªùi ', '\\bdz·∫≠y\\b': ' g√¨ v·∫≠y ',
                    '\\bak\\b': ' √† ', '\\bnh∆∞ng v√£n\\b': ' nh∆∞ng v·∫´n ', '\\bgd\\b': ' gi√°o d·ª•c ', '\\boto\\b': ' √¥ t√¥ ', '\\bng ta\\b': ' ng∆∞·ªùi ta ',
                    '\\br√≤ii\\b': ' r·ªìi ', '\\bbg\\b': ' b√¢y gi·ªù ', '\\bdhs\\b': '', '\\bstyle\\b': ' ki·ªÉu ', '\\bgvcn\\b': ' gi√°o vi√™n ch≈© nhi·ªám ',
                    '\\b∆°iii\\b': ' ∆°i ', '\\bs\\b': ' sao ', '\\b17t\\b': ' 17 tu·ªïi ', '\\bm·∫°n c√≥a\\b': ' m·∫°n qu√° ', '\\bhqua\\b': ' h√¥m qua ', '\\bnh∆∞g\\b': ' nh∆∞ng ',
                    '\\bmv\\b': ' video ca nh·∫°c ', '\\bƒëg\\b': ' ƒë∆∞·ªùng ', '\\b0 ‚Ç´\\b': ' 0 ƒëi·ªÉm ', '\\bkill\\b': ' gi·∫øt ', '\\bwtf\\b': ' what the fuck ',
                    '\\bh√™t c·∫£\\b': ' h·∫øt c·∫£ ', '\\bevery where\\b': ' m·ªçi n∆°i ', '\\bdhs\\b': "ƒë√©o hi·ªÉu sao",  "\\bhmm\\b": "", "\\bhmmmmmmm\\b" : ""
    }
    for old_word, new_word in replacements.items():
        text = re.sub(old_word, new_word, text)

    # Thay th·∫ø d·∫•u ch·∫•m th√†nh d·∫•u c√°ch, gi·ªØ l·∫°i c√°c bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c
    text = re.sub(r'\.', ' ', text)

    return text

def replace_emoticons(text):
    #Quy c√°c icon v·ªÅ 2 lo·∫°i emoj: positive ho·∫∑c nagative
    emoticon_mapping = {
        "üò†": "b·ª±c m√¨nh", "üòÇ": "ha ha ", "üò°" : "b·ª±c m√¨nh ", "ü§ß": "b·ª±c m√¨nh ", "ü§§" : "hi hi ", "üòà": "b·ª±c m√¨nh ", "üòí": "ƒëm ",
        "üò≠": "hu hu ", "üòî" : "hic", "üôÉ": "üôÇ", "ü§¨" : "b·ª±c m√¨nh", "< 3" : "<3","‚ù§Ô∏è" : "<3", "‚ù§" : "<3", "ü§£" : "ha ha", "üåß": "m∆∞a",
        "üòè": "üôÇ", "ü•∞" : "<3 ", "üíï": "<3 ", "üòç": "<3 ", "üí™": "c·ªë l√™n ",  "‚òπÔ∏è" : "hic", "ü§¢": "kinh t·ªüm", "ü§Æ" :"kinh t·ªüm",
        "üòÜ": "ha ha", "üíì" : "<3", "üòÅ": "ha ha ", "üòä" : "hi hi ", "‚ô•" : "<3", "üíî" : "bu·ªìn", "üòø" : "hu hu ", "üò¢" :"hu hu ",
        "üòû": "hic ", "‚ò∫Ô∏è" :"<3", "üòò" : "<3",  "‚ô•" : "<3", "ü§ë" : "hi hi", "üòù": "hi hi", "üòπ": "ha ha", "üòé": "ha ha",
        "ü§©": "<3", "üòª": "<3", "üò±": "s·ª£ v√£i", "üòÑ": "ha ha ", "üò´": "hu hu ", "ü§î": "? ",


    #Quy c√°c k√Ω icon v·ªÅ k√Ω hi·ªáu
        "üòë" : "-_-" , "._." : "-_-", "-.-" : "-_-", ":|": "-_-", "üòÄ": ":D", "‚òπ" : "-_-",

    }
    # Bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ t√¨m ki·∫øm t·∫•t c·∫£ c√°c emoticon trong vƒÉn b·∫£n
    emoticon_pattern = re.compile('|'.join(re.escape(k) for k in emoticon_mapping.keys()))

    # H√†m thay th·∫ø cho m·ªói emoticon
    def replace(match):
        return emoticon_mapping[match.group(0)]

    # Thay th·∫ø c√°c emoticon trong vƒÉn b·∫£n
    text = emoticon_pattern.sub(replace, text)

    # Bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ thay th·∫ø nhi·ªÅu d·∫•u "(" ho·∫∑c ")" li√™n ti·∫øp b·∫±ng m·ªôt emoticon duy nh·∫•t
    consecutive_parentheses_pattern = re.compile(r'(\(+)|(\)+)')

    # H√†m thay th·∫ø cho m·ªói chu·ªói d·∫•u "(" ho·∫∑c ")"
    def replace_consecutive_parentheses(match):
        if match.group(1):
            return 'üò≠'
        elif match.group(2):
            return 'üòÇ'


    # Thay th·∫ø nhi·ªÅu d·∫•u "(" ho·∫∑c ")" li√™n ti·∫øp b·∫±ng m·ªôt emoticon duy nh·∫•t
    text = consecutive_parentheses_pattern.sub(replace_consecutive_parentheses, text)
    if "üòÇ" in text:
        text = text.replace("üòÇ", "ha ha")
    elif "üò≠" in text:
        text = text.replace("üò≠", "hu hu")
    # Danh s√°ch c√°c bi·ªÉu t∆∞·ª£ng c·∫ßn x√≥a
    icons_to_remove = ["üê∂", "üíã", "üï∏", "üå∏", "üôéüèª‚Äç‚ôÄÔ∏è", "üíÉ", "üï∏","üåß"," üèª ", "ü§¶üèª‚Äç‚ôÄÔ∏è" ,"ü§®","üò©","üò∂","üò©","üôè","ü§ï", "üò§","üòå","üí©",
                       "üòï", "üôÑ", "ü•µ", "ü§™", "üôÑ", "üëå", "‚òùÔ∏è", "üòñ","ü§¶üèª‚Äç‚ôÇÔ∏è", "ü§¶‚Äç‚ôÄÔ∏è", "üò™", "‚òª", "üê∂", "üêï", "ü§¶üèª‚Äç‚ôÄÔ∏è", "üëª", "üíã",
                       "üëè", "üôè", "üëè", "üëèüèª", "ü§î", "ü§ó", "üò¨", "üßê", "üòÖ", "üò≠", "#", "üôÅ", "- -", "-_-", "üò•", "üåù", "üåö", "üò∂",
                       "üò•", "üò™","üò£", "ü§≠", "üò≥","üôÅ","ü§Ø","üò™", "üò¶", "üòö", "üòÑ", "üôÅ", "üò™", "üò•", "ü§´", "ü§ï", "üòÆ", "üòÉ", "üòú",
                       "üòâ","üòê","üòó","üò¥"
                      ]
    # X√≥a c√°c bi·ªÉu t∆∞·ª£ng c·∫ßn lo·∫°i b·ªè
    for icon in icons_to_remove:
        text = text.replace(icon, "")


    return text



# ƒê·ªãnh nghƒ©a l·ªõp SentimentClassifier
class SentimentClassifier(nn.Module):
    def __init__(self, n_classes):
        super(SentimentClassifier, self).__init__()
        self.bert = AutoModel.from_pretrained("vinai/phobert-base")
        self.drop = nn.Dropout(p=0.3)
        self.fc = nn.Linear(self.bert.config.hidden_size, n_classes)
        nn.init.normal_(self.fc.weight, std=0.02)
        nn.init.normal_(self.fc.bias, 0)

    def forward(self, input_ids, attention_mask):
        last_hidden_state, output = self.bert(
            input_ids=input_ids,
            attention_mask=attention_mask,
            return_dict=False
        )

        x = self.drop(output)
        x = self.fc(x)
        return x

# ƒê·ªãnh nghƒ©a l·ªõp SentimentPredictor
class SentimentPredictor:
    def __init__(self, model_path, class_names):
        self.tokenizer = AutoTokenizer.from_pretrained("vinai/phobert-base", use_fast=False)
        self.model = self.load_model(model_path)
        self.class_names = class_names

    def load_model(self, model_path):
        model = SentimentClassifier(n_classes=7)
        model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
        model.to(device)
        model.eval()
        return model

    def predict_sentiment(self, text):
        encoded_review = self.tokenizer.encode_plus(
            text,
            max_length=50,  # Thay ƒë·ªïi theo ƒë·ªô d√†i t·ªëi ƒëa b·∫°n ƒë√£ ch·ªçn khi hu·∫•n luy·ªán m√¥ h√¨nh
            truncation=True,
            add_special_tokens=True,
            padding='max_length',
            return_attention_mask=True,
            return_token_type_ids=False,
            return_tensors='pt',
        )

        input_ids = encoded_review['input_ids'].to(device)
        attention_mask = encoded_review['attention_mask'].to(device)

        output = self.model(input_ids, attention_mask)
        _, y_pred = torch.max(output, dim=1)

        return self.class_names[y_pred]

# S·ª≠ d·ª•ng
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
model_path = r'D:\A.I\FSOFT_semester_4\Project\Group_1\Train_(7)\phobert_fold4.pth'
class_names = ["Enjoyment", "Disgust", "Sadness", "Anger", "Surprise", "Fear", "Other"]
predictor = SentimentPredictor(model_path, class_names)

#Nh·∫≠p vƒÉn b·∫£n b·∫°n mu·ªën d·ª± ƒëo√°n
text_to_predict = input("Nh·∫≠p vƒÉn b·∫£n c·∫ßn d·ª± ƒëo√°n c·∫£m x√∫c: ")
text_to_predict = replace_emoticons(replace_words(text_to_predict))
predicted_sentiment = predictor.predict_sentiment(text_to_predict)
print(f'Text: {text_to_predict}')
print(f'Predicted Sentiment: {predicted_sentiment}')

